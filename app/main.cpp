/** @file main.cpp
 * @brief Executing PID controller
 * @author Amrish Baskaran
 * Copyright 2018 Amrish Baskaran
 */
#include <iostream>
#include <sstream>

#include "../include/Arena.h"
#include "../include/AStarAlgorithm.h"
#include "../include/PathOutput.h"

int main() {
  // Create an instance of Arena class
  Arena arena;
  // check whether user wants to run demo
  std::cout << " Do u want to run the demo? (y/n):";
  char u;
  std::cin >> u;
  if (u == 'y') {
    // send necessary parameter for demo map
    // including start, end points and obstacles.
    std::stringstream sin;
    std::stringstream sout;
    sin << "5 5 10 0 0 0 1 2 1 3 1 2 2 3 2 1 4 2 4 4 4 5 4 1 0 5 5";
    // Explain the Map Visualization
    std::cout << " " << std::endl;
    std::cout << "0- Free space on the Map" << std::endl;
    std::cout << "1- Obstacles" << std::endl;
    std::cout << " " << std::endl;
    arena.getWorkspace(sin, sout);

  } else {
    // Get necessary parameter from the user of the map
    // including start, end points and obstacles.
    arena.getWorkspace(std::cin, std::cout);
  }


  // Create an instance of AStarAlgorithm Class
  AStarAlgorithm Astar;
  Astar.setArena(arena);
  // Execute the calculation for generating the path
  Astar.compute();
  // create an instance of the PathOutput Class
  PathOutput PO;
  PO.setAStar(Astar);
  // Display the Path generated by the compute() method.
  PO.DisplayPath(std::cout);
  // explain the visualization to the user
  std::cout << " " << std::endl;
  std::cout << "0- Free space on the Map" << std::endl;
  std::cout << "1- Obstacles" << std::endl;
  std::cout << "S- Start Point of Robot" << std::endl;
  std::cout << "E- End/ Goal point for the robot to reach" << std::endl;
  std::cout << "*- Path Generated using the A* Algorithm" << std::endl;
    return 0;
}
